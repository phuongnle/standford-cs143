/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {:

    int curr_lineno() {
        return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
        return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:}

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
        String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + ": parse error at or near ");
        Utilities.printToken(cur_token);
        omerrs++;
        if (omerrs>50) {
               System.err.println("More than 50 errors");
           System.exit(1);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features dummy_feature_list;
nonterminal Feature feature;
nonterminal Formals formals;
nonterminal Formal formal;
nonterminal Expressions expression_list;
nonterminal Expression expression;
nonterminal Cases case_list;
nonterminal Case scase;

/* Precedence declarations go here. */

program
    ::= class_list:cl
        {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
    /* single class */
    ::= class:c
        {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
        /* several classes */
        |
        class_list:cl class:c
        {: RESULT = cl.appendElement(c); :}
        ;

/* If no parent is specified, the class inherits from the Object class */
class
    ::= CLASS TYPEID:n LBRACE dummy_feature_list:f RBRACE SEMI
        {: RESULT = new class_c(curr_lineno(), n, AbstractTable.idtable.addString("Object"), f, curr_filename()); :}
        |
        CLASS TYPEID:n INHERITS TYPEID:p LBRACE dummy_feature_list:f RBRACE SEMI
        {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
        ;

/* Feature list may be empty, but no empty features in list. */
dummy_feature_list
    ::= /* empty */
        {: RESULT = new Features(curr_lineno()); :}
        |
        dummy_feature_list:fl feature:f
        {: RESULT = fl.appendElement(f); :}
        ;

feature
    ::= OBJECTID:n LPAREN formals:f RPAREN COLON TYPEID:t LBRACE expression:e RBRACE SEMI
        {: RESULT = new method(curr_lineno(), n, f, t, e); :}
        |
        OBJECTID:n COLON TYPEID:t SEMI
        {: RESULT = new attr(curr_lineno(), n, t, new no_expr(curr_lineno())); :}
        |
        OBJECTID:n COLON TYPEID:t ASSIGN expression:e SEMI
        {: RESULT = new attr(curr_lineno(), n, t, e); :}
        ;

formals
    ::= /* empty */
        {: RESULT = new Formals(curr_lineno()); :}
        |
        formal:f
        {: RESULT = (new Formals(curr_lineno())).appendElement(f); :}
        |
        formals:fs COMMA formal:f
        {: RESULT = fs.appendElement(f); :}
        ;

formal
    ::= OBJECTID:o COLON TYPEID:t
        {: RESULT = new formalc(curr_lineno(),o, t); :}
        ;

expression_list
    ::= /* empty */
        {: RESULT = new Expressions(curr_lineno()); :}
        |
        expression:e
        {: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
        |
        expression_list: el SEMI expression:e
        {: RESULT = el.appendElement(e); :}
        ;

expression
    ::=
        /* const */
        BOOL_CONST:n
        {: RESULT = new bool_const(curr_lineno(), n); :}
        |
        INT_CONST:n
        {: RESULT = new int_const(curr_lineno(), n); :}
        |
        STR_CONST:n
        {: RESULT = new string_const(curr_lineno(), n); :}
        |
        /* identifier */
        OBJECTID:n
        {: RESULT = new object(curr_lineno(), n); :}
        |
        /* assignment */
        OBJECTID:n ASSIGN expression:e
        {: RESULT = new assign(curr_lineno(), n, e); :}
        |
        /* condition */
        IF expression:c THEN expression:t FI
        {: RESULT = new cond(curr_lineno(), c, t, new no_expr(curr_lineno())); :}
        |
        IF expression:c THEN expression:t ELSE expression:e FI
        {: RESULT = new cond(curr_lineno(), c, t, e); :}
        |
        /* loop */
        WHILE expression:e LOOP expression:l POOL
        {: RESULT = new loop(curr_lineno(), e, l); :}
        |
        /* block */
        LBRACE expression_list:el RBRACE
        {: RESULT = new block(curr_lineno(), el); :}
        |
        /* let */
        LET OBJECTID:n COLON TYPEID:t IN expression:e
        {: RESULT = new let(curr_lineno(), n, t, new no_expr(curr_lineno()), e); :}
        |
        LET OBJECTID:n COLON TYPEID:t ASSIGN expression:init IN expression:e
        {: RESULT = new let(curr_lineno(), n, t, init, e); :}
        |
        /* case */
        CASE expression:e0 OF case_list:c ESAC
        {: RESULT = new typcase(curr_lineno(), e0, c); :}
        |
        /* plus */
        expression:e1 PLUS expression:e2
        {: RESULT = new plus(curr_lineno(), e1, e2); :}
        ;

case_list
    ::= /* empty */
        {: RESULT = new Cases(curr_lineno()); :}
        |
        case_list:cs scase:sc
        {: RESULT = cs.appendElement(sc); :}
        ;

scase
    ::= OBJECTID:n TYPEID:t DARROW expression:e SEMI
        {: RESULT = new branch(curr_lineno(), n, t, e); :}
        ;